@page "/manageclasses"
@using global::MarkMe.Models
@inject AttendanceService AttendanceService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3 class="mb-4">Manage Classes</h3>

<div class="row g-4">
    <!-- Classes List -->
    <div class="col-md-6">
        <div class="card shadow-sm p-3">
            <h5 class="card-title mb-3"><i class="bi bi-journal-text me-2"></i>Classes</h5>
            <ul class="list-group list-group-flush">
                @foreach (var cls in classes)
                {
                    <li class="list-group-item bg-transparent border-secondary text-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <a href="javascript:void(0)" class="fw-bold text-decoration-none text-info"
                               @onclick="() => OpenClassDetails(cls.ClassName)">
                                <i class="bi bi-door-open me-1"></i>@cls.ClassName
                            </a>
                            <div>
                                <button class="btn btn-sm btn-outline-warning me-1" title="Edit Class"
                                        @onclick="() => EditClassName(cls)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" title="Delete Class"
                                        @onclick="() => DeleteClass(cls.ClassName)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>

                        <div class="mt-2">
                            <strong>Students:</strong>
                            <ul class="list-unstyled ms-3 mt-2">
                                @foreach (var s in cls.Students)
                                {
                                    <li class="d-flex justify-content-between align-items-center py-1">
                                        <span>@s</span>
                                        <span>
                                            <button class="btn btn-sm btn-link text-warning p-0 me-2"
                                                    title="Edit Student"
                                                    @onclick="() => EditStudent(cls.ClassName, s)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-link text-danger p-0"
                                                    title="Delete Student"
                                                    @onclick="() => DeleteStudent(cls.ClassName, s)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </span>
                                    </li>
                                }
                            </ul>

                            <div class="input-group mt-2">
                                <input class="form-control" placeholder="New student name"
                                       @bind="newStudentName[cls.ClassName]" />
                                <button class="btn btn-primary" title="Add Student"
                                        @onclick="() => AddStudent(cls.ClassName)">
                                    <i class="bi bi-plus-circle"></i>
                                </button>
                            </div>
                        </div>
                    </li>
                }
            </ul>

            <div class="input-group mt-3">
                <input class="form-control" placeholder="New class name" @bind="newClassName" />
                <button class="btn btn-success" title="Add Class" @onclick="AddClass">
                    <i class="bi bi-plus-lg"></i> Add
                </button>
            </div>
        </div>
    </div>

    <!-- Editor Panel -->
    <div class="col-md-6">
        <div class="card shadow-sm p-3">
            <h5 class="card-title mb-3"><i class="bi bi-pencil me-2"></i>Editor</h5>

            @if (editingClass != null)
            {
                <div class="mb-4">
                    <label class="form-label fw-bold">Editing Class:</label>
                    <input class="form-control mb-2" @bind="editingClassName" />
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary" @onclick="SaveClassName">
                            <i class="bi bi-save"></i> Save
                        </button>
                        <button class="btn btn-secondary" @onclick="CancelEdit">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </div>
            }

            @if (editingStudent != null)
            {
                <div>
                    <label class="form-label fw-bold">Editing Student (in @editingStudentClass):</label>
                    <input class="form-control mb-2" @bind="editingStudentName" />
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary" @onclick="SaveStudentEdit">
                            <i class="bi bi-save"></i> Save
                        </button>
                        <button class="btn btn-secondary" @onclick="CancelStudentEdit">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private List<ClassInfo> classes = new();
    private string newClassName = "";
    private Dictionary<string, string> newStudentName = new();
    private ClassInfo? editingClass = null;
    private string editingClassName = "";
    private string? editingStudentClass = null;
    private string? editingStudent = null;
    private string editingStudentName = "";

    protected override void OnInitialized()
    {
        classes = AttendanceService.GetAllClasses();
        foreach(var c in classes) newStudentName[c.ClassName] = "";
    }

    private void Refresh()
    {
        classes = AttendanceService.GetAllClasses();

        // Rebuild the newStudentName map so bindings don't throw/point to missing keys
        newStudentName = classes.ToDictionary(c => c.ClassName, c => "");

        StateHasChanged();
    }


    private void AddClass()
    {
        if (string.IsNullOrWhiteSpace(newClassName)) return;
        AttendanceService.AddClass(newClassName.Trim());
        newStudentName[newClassName.Trim()] = "";
        newClassName = "";
        Refresh();
    }

    private void DeleteClass(string className)
    {
        if (!confirm($"Delete class '{className}'? This will also remove teacher info.")) return;
        AttendanceService.DeleteClass(className);
        Refresh();
    }

    private void EditClassName(ClassInfo cls)
    {
        editingClass = cls;
        editingClassName = cls.ClassName;
    }

    private void SaveClassName()
    {
        if (editingClass == null) return;
        AttendanceService.RenameClass(editingClass.ClassName, editingClassName.Trim());
        editingClass = null;
        editingClassName = "";
        Refresh();
    }

    private void CancelEdit()
    {
        editingClass = null;
        editingClassName = "";
    }

    private void AddStudent(string className)
    {
        var name = newStudentName.GetValueOrDefault(className)?.Trim();
        if (string.IsNullOrWhiteSpace(name)) return;
        AttendanceService.AddStudentToClass(className, name);
        newStudentName[className] = "";
        Refresh();
    }

    private void DeleteStudent(string className, string student)
    {
        if (!confirm($"Delete student '{student}' from {className}?")) return;
        AttendanceService.DeleteStudentFromClass(className, student);
        Refresh();
    }

    private void EditStudent(string className, string student)
    {
        editingStudentClass = className;
        editingStudent = student;
        editingStudentName = student;
    }

    private void SaveStudentEdit()
    {
        if (editingStudentClass == null || editingStudent == null) return;
        AttendanceService.UpdateStudentInClass(editingStudentClass, editingStudent, editingStudentName.Trim());
        editingStudent = null;
        editingStudentClass = null;
        editingStudentName = "";
        Refresh();
    }

    private void CancelStudentEdit()
    {
        editingStudent = null;
        editingStudentClass = null;
        editingStudentName = "";
    }

    private void OpenClassDetails(string className)
    {
        Navigation.NavigateTo($"/classdetails/{Uri.EscapeDataString(className)}");
    }

    private bool confirm(string msg)
    {
        return true;
    }
}
